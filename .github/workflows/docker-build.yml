name: Docker Image CI

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract tag name
      id: extract_tag
      run: |
        echo "TAG<<EOF" >> $GITHUB_OUTPUT
        echo "${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          alterem/gemini-poise:${{ steps.extract_tag.outputs.TAG }}
          alterem/gemini-poise:latest
          ghcr.io/${{ github.repository }}/gemini-poise:${{ steps.extract_tag.outputs.TAG }}
          ghcr.io/${{ github.repository }}/gemini-poise:latest
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./gemini-poise-frontend
        file: ./gemini-poise-frontend/Dockerfile
        push: true
        tags: |
          alterem/gemini-poise-frontend:${{ steps.extract_tag.outputs.TAG }}
          alterem/gemini-poise-frontend:latest
          ghcr.io/${{ github.repository }}/gemini-poise-frontend:${{ steps.extract_tag.outputs.TAG }}
          ghcr.io/${{ github.repository }}/gemini-poise-frontend:latest
        platforms: linux/amd64,linux/arm64

    - name: Generate Changelog
      id: changelog
      run: |
        PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1 2>/dev/null || echo "")
        echo "::debug::Previous tag found: '$PREVIOUS_TAG'"

        CHANGELOG_CONTENT=""
        GIT_LOG_COMMAND=""

        if [ -z "$PREVIOUS_TAG" ]; then
          GIT_LOG_COMMAND='git log --pretty=format:"* %s (%h)"'
          CHANGELOG_CONTENT=$(git log --pretty=format:"* %s (%h)")
        else
          GIT_LOG_COMMAND="git log --pretty=format:\"* %s (%h)\" $PREVIOUS_TAG..HEAD"
          CHANGELOG_CONTENT=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
        fi
        echo "::debug::Executing command: $GIT_LOG_COMMAND"
        echo "::debug::Raw git log output:"
        echo "$CHANGELOG_CONTENT"
        echo "::debug::End of raw git log output."
        DELIMITER=$(openssl rand -hex 8)
        echo "::debug::Writing to GITHUB_OUTPUT with delimiter $DELIMITER"
        printf "%s<<%s\n%s\n%s\n" "CHANGELOG" "$DELIMITER" "$CHANGELOG_CONTENT" "$DELIMITER" >> "$GITHUB_OUTPUT"
        echo "::debug::Finished writing to GITHUB_OUTPUT."
      shell: bash

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.extract_tag.outputs.TAG }}
        name: Release ${{ steps.extract_tag.outputs.TAG }}
        body: |
            ### Release ${{ github.ref_name }}
            
            #### Changelog
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ---
            
            See the assets below for the builds.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}