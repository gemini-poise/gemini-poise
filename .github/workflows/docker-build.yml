name: Docker Image CI

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract tag name
      id: extract_tag
      run: |
        echo "TAG<<EOF" >> $GITHUB_OUTPUT
        echo "${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          alterem/gemini-poise:${{ steps.extract_tag.outputs.TAG }}
          ghcr.io/${{ github.repository }}/gemini-poise:${{ steps.extract_tag.outputs.TAG }}
          ${{ github.ref_name == 'main' && 'alterem/gemini-poise:latest' || '' }}
          ${{ github.ref_name == 'main' && format('ghcr.io/{0}/gemini-poise:latest', github.repository) || '' }}
        platforms: linux/amd64,linux/arm64

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./gemini-poise-frontend
        file: ./gemini-poise-frontend/Dockerfile
        push: true
        tags: |
          alterem/gemini-poise-frontend:${{ steps.extract_tag.outputs.TAG }}
          ghcr.io/${{ github.repository }}/gemini-poise-frontend:${{ steps.extract_tag.outputs.TAG }}
          ${{ github.ref_name == 'main' && 'alterem/gemini-poise-frontend:latest' || '' }}
          ${{ github.ref_name == 'main' && format('ghcr.io/{0}/gemini-poise-frontend:latest', github.repository) || '' }}
        platforms: linux/amd64,linux/arm64

    - name: Generate Changelog
      id: changelog
      run: |
        # Fetch all tags to ensure we have complete history
        git fetch --tags || true
        
        # Get the previous tag (skip the current tag being built)
        CURRENT_TAG="${GITHUB_REF#refs/tags/}"
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${CURRENT_TAG}$" | head -1 2>/dev/null || echo "")
        echo "::debug::Current tag: '$CURRENT_TAG'"
        echo "::debug::Previous tag found: '$PREVIOUS_TAG'"

        CHANGELOG_CONTENT=""

        if [ -z "$PREVIOUS_TAG" ]; then
          echo "::debug::No previous tag found, generating full changelog"
          CHANGELOG_CONTENT=$(git log --oneline --pretty=format:"* %s (%h)" || echo "* Initial release")
        else
          echo "::debug::Generating changelog from $PREVIOUS_TAG to HEAD"
          CHANGELOG_CONTENT=$(git log --oneline --pretty=format:"* %s (%h)" "$PREVIOUS_TAG..HEAD" || echo "* No changes found")
        fi

        # Ensure we have some content
        if [ -z "$CHANGELOG_CONTENT" ]; then
          CHANGELOG_CONTENT="* No changes found"
        fi

        echo "::debug::Final changelog content:"
        echo "$CHANGELOG_CONTENT"
        
        # Write to GitHub output with proper delimiter
        DELIMITER="EOF_$(date +%s)"
        echo "CHANGELOG<<$DELIMITER" >> "$GITHUB_OUTPUT"
        echo "$CHANGELOG_CONTENT" >> "$GITHUB_OUTPUT"
        echo "$DELIMITER" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.extract_tag.outputs.TAG }}
        name: Release ${{ steps.extract_tag.outputs.TAG }}
        body: |
            ### Release ${{ github.ref_name }}
            
            #### Changelog
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ---
            
            See the assets below for the builds.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}